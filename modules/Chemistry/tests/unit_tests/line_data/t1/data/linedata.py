import numpy as np
import re




# Defs
# ----

def readDataInt(fileName, start, stop, regex):
    # Read integers in 'data' from line 'start' until line 'stop' following 'regex'
    with open(fileName) as dataFile:
        data = dataFile.readlines()
    variable = []
    for i in range(start,stop):
        variable +=  [int(word) for word in re.findall(regex, data[i])]
    return variable


def readDataFlt(fileName, start, stop, regex):
    # Read floats in 'data' from line 'start' until line 'stop' following 'regex'
    with open(fileName) as dataFile:
        data = dataFile.readlines()
    variable = []
    for i in range(start,stop):
        variable += [float(word) for word in re.findall(regex, data[i])]
    return variable


def readColumn(fileName, start, nElem, columnNr, type):
    with open(fileName) as dataFile:
        lineNr = 0
        column = []
        for line in dataFile:
            if (lineNr >= start) and (lineNr < start+nElem):
                if type == 'float':
                    column.append(float(line.split()[columnNr]))
                if type == 'long':
                    column.append(long(line.split()[columnNr]))
                if type == 'int':
                    column.append(int(line.split()[columnNr]))
                if type == 'str':
                    column.append(str(line.split()[columnNr]))
            lineNr += 1
    return column


def writeCodeHeader(fileName):
    # Write header for code file
    with open(fileName, 'w') as codeFile:
        header = '// Generated by linedata.py\n\n'
        codeFile.write(header)


def writeCodeScalar(fileName, scalar, name):
    # Write scalar in C format to code file
    if (type(scalar) is float):
        line = 'const double '
    if (type(scalar) is int):
        line = 'const int '
    line += name
    line += ' = '
    line += str(scalar)
    line += ';\n\n'
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


def CArray(array):
    # Returns C formatted string of 'array'
    line = '{' + str(array[0])
    for i in range(1,len(array)):
        line += ', ' + str(array[i])
    line += '}'
    return line


def writeCodeVector(fileName, vector, name):
    # Write vector in C format to code file
    if (type(vector[0]) is float):
        line = 'const double '
    if (type(vector[0]) is int):
        line = 'const int '
    line += name
    line += '[' + str(len(vector)) + ']'
    line += ' = '
    line += CArray(vector)
    line += ';\n\n'
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


def writeCodeMatrix(fileName, matrix, name):
    # Write matrix in C format to code file
    if (type(matrix[0][0]) is float):
        line = 'const double '
    if (type(matrix[0][0]) is int):
        line = 'const int '
    line += name
    line += '[' + str(len(matrix)) + ']'
    line += '[' + str(len(matrix[0])) + ']'
    line += ' = '
    line += CArray( [CArray(vector) for vector in matrix] )
    line += ';\n\n'
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


def writeCodeCuboid(fileName, cuboid, name):
    # Write cuboid in C format to code file
    if (type(cuboid[0][0][0]) is float):
        line = 'const double '
    if (type(cuboid[0][0][0]) is int):
        line = 'const int '
    line += name
    line += '[' + str(len(cuboid)) + ']'
    line += '[' + str(len(cuboid[0])) + ']'
    line += '[' + str(len(cuboid[0][0])) + ']'
    line += ' = '
    line += CArray([CArray([CArray(vector) for vector in matrix]) for matrix in cuboid])
    line += ';\n\n'
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


def zero1(side1):
    return [0.0 for _ in range(side1)]


def zero2(side1, side2):
    return [[0.0 for _ in range(side2)] for _ in range(side1)]


def zero3(side1, side2, side3):
    return [[[0.0 for _ in range(side3)] for _ in range(side2)] for _ in range(side1)]




# Read line data (VanZadelhoff format)
# ------------------------------------

# fileName = 'hco+.dat'

# mass     = readDataFlt(fileName, start=1,  stop=2,   regex='\d+\.\d+')[0]
# nlev     = readDataInt(fileName, start=2,  stop=3,   regex='\d+')[0]
# nrad     = readDataInt(fileName, start=2,  stop=3,   regex='\d+')[1]
# energy   = readDataFlt(fileName, start=3,  stop=6,   regex='\d+\.\d{7}')
# weight   = readDataFlt(fileName, start=6,  stop=8,   regex='\d+\.\d{1}')
# irad     = readDataInt(fileName, start=8,  stop=9,   regex='\d+')
# jrad     = readDataInt(fileName, start=9,  stop=10,  regex='\d+')
# A_coeff  = readDataFlt(fileName, start=10, stop=14,  regex='\d+\.\d{3}E[+-]?\d{2}')
# ncoltran = readDataInt(fileName, start=14, stop=15,  regex='\d+')[0]
# ncoltemp = readDataInt(fileName, start=14, stop=15,  regex='\d+')[1]
# coltemp  = readDataFlt(fileName, start=14, stop=15,  regex='\d+\.\d+')
# icol     = readDataInt(fileName, start=15, stop=24,  regex='\d+')
# jcol     = readDataInt(fileName, start=24, stop=33,  regex='\d+')
# C_coeff  = readDataFlt(fileName, start=33, stop=141, regex='\d+\.\d+E[+-]?\d+')


class Quantity():
    """ Physical quantity

    Attributes:
        value: the value of the Quantity
        units: the units in which the value is expressed
    """

    def __init__(self, value, units):


class LineData():

    """ Molecular line data """

    def __init__(self):

        """ Initialize all attributes """

        self.mass      = 0.0  # Molecular weight
        self.nlev      = 0    # Number of levels
        self.energy    = []   # Energy of levels
        self.weight    = []   # Weight of levels
        self.nrad      = 0    # Number of radiative transitions
        self.irad      = []   # Upper index of radiative transitions
        self.jrad      = []   # Lower index of radiative transitions
        self.A_coeff   = []   # Einstein A coefficients (spont. emission)
        self.frequency = []   # Photon frequency assiciated with transition

    def readLamdaFile(self, fileName):

        """ Read line data in LAMDA format """

        self.mass      = readColumn(fileName, start=3,            nElem=1,         columnNr=0, type='float')[0]
        self.nlev      = readColumn(fileName, start=5,            nElem=1,         columnNr=0, type='int')[0]
        self.energy    = readColumn(fileName, start=7,            nElem=self.nlev, columnNr=1, type='float')
        self.weight    = readColumn(fileName, start=7,            nElem=self.nlev, columnNr=2, type='float')
        self.nrad      = readColumn(fileName, start=8+self.nlev,  nElem=1,         columnNr=0, type='int')[0]
        self.irad      = readColumn(fileName, start=10+self.nlev, nElem=self.nrad, columnNr=1, type='int')
        self.jrad      = readColumn(fileName, start=10+self.nlev, nElem=self.nrad, columnNr=2, type='int')
        self.A_coeff   = readColumn(fileName, start=10+self.nlev, nElem=self.nrad, columnNr=3, type='float')
        self.frequency = readColumn(fileName, start=10+self.nlev, nElem=self.nrad, columnNr=4, type='float')

        nlr = self.nlev + self.nrad

        self.ncoltran = []
        self.ncoltemp = []
        self.coltemp  = []
        self.icol     = []
        self.jcol     = []
        self.C_coeff  = []

        self.cum_ncoltran = [0]
        self.cum_ncoltemp = [0]

        self.ncolpar = readColumn(fileName, start=11+nlr, nElem=1,  columnNr=0, type='int')[0]
        index   = 15 + nlr

        for colpar in range(self.ncolpar):

            self.ncoltran.append(readColumn(fileName, start=index,   nElem=1, columnNr=0, type='int')[0])
            self.ncoltemp.append(readColumn(fileName, start=index+2, nElem=1, columnNr=0, type='int')[0])

            self.cum_ncoltran.append(self.cum_ncoltran[colpar]+self.ncoltran[colpar])
            self.cum_ncoltemp.append(self.cum_ncoltemp[colpar]+self.ncoltemp[colpar])

            self.coltemp.append([readColumn(fileName, start=index+4, nElem=1, columnNr=temp, type='float')[0] for temp in range(self.ncoltemp[colpar])])

            self.icol.append(readColumn(fileName, start=index+6, nElem=self.ncoltran[colpar], columnNr=1, type='int'))
            self.jcol.append(readColumn(fileName, start=index+6, nElem=self.ncoltran[colpar], columnNr=2, type='int'))

            self.C_coeff.append([readColumn(fileName, start=index+6, nElem=self.ncoltran[colpar], columnNr=temp, type='float') for temp in range(self.ncoltemp[colpar])])

            index += 9 + self.ncoltran[colpar]


def vectorizeLineData(lineDataList):
    # Concatenate line date into vectors
    ldVector = LineData()
    ldVector.mass         = [ld.mass         for ld in lineDataList]
    ldVector.nlev         = [ld.nlev         for ld in lineDataList]
    ldVector.energy       = [ld.energy       for ld in lineDataList]
    ldVector.weight       = [ld.weight       for ld in lineDataList]
    ldVector.nrad         = [ld.nrad         for ld in lineDataList]
    ldVector.irad         = [ld.irad         for ld in lineDataList]
    ldVector.jrad         = [ld.jrad         for ld in lineDataList]
    ldVector.A_coeff      = [ld.A_coeff      for ld in lineDataList]
    ldVector.ncoltran     = [ld.ncoltran     for ld in lineDataList]
    ldVector.ncoltemp     = [ld.ncoltemp     for ld in lineDataList]
    ldVector.coltemp      = [ld.coltemp      for ld in lineDataList]
    ldVector.icol         = [ld.icol         for ld in lineDataList]
    ldVector.jcol         = [ld.jcol         for ld in lineDataList]
    ldVector.cum_ncoltran = [ld.cum_ncoltran for ld in lineDataList]
    ldVector.cum_ncoltemp = [ld.cum_ncoltemp for ld in lineDataList]
    return ldVector

# Arrange Einstein coefficients
# -----------------------------
#
# c = 2.99792458e+10   # speed of light in cgs
# h = 6.62606896E-27   # Planck's constant in cgs
#
# A         = zero2(nlev,nlev)
# B         = zero2(nlev,nlev)
# frequency = zero2(nlev,nlev)
# C_data    = zero3(ncoltemp,nlev,nlev)
#
# for k in range(nrad):
#     i = irad[k]-1
#     j = jrad[k]-1
#     A[i][j] = A_coeff[k]
#     B[i][j] = A[i][j]*(h*c)**2 / (2.0*(energy[i]-energy[j])**3)
#     B[j][i] = weight[i] / weight[j] * B[i][j]
#
# for i in range(nlev):
#     for j in range(nlev):
#         frequency[i][j] = (energy[i]-energy[j]) / h
#         frequency[j][i] = frequency[i][j]
#
#
# for t in range(ncoltemp):
#     for k in range(ncoltran):
#         i = icol[k]-1
#         j = jcol[k]-1
#         C_data[t][i][j] = C_coeff[k + t*ncoltran]


# Write code
# ----------

# fileName = 'code.hpp'

# writeCodeHeader(fileName)
# writeCodeVector(fileName, vector=[nlev],     name='nlev')
# writeCodeVector(fileName, vector=[nrad],     name='nrad')
# writeCodeVector(fileName, vector=energy,     name='energy')
# writeCodeVector(fileName, vector=weight,     name='weight')
# writeCodeVector(fileName, vector=irad,       name='irad')
# writeCodeVector(fileName, vector=jrad,       name='jrad')
# writeCodeMatrix(fileName, matrix=frequency,  name='frequency')
# writeCodeMatrix(fileName, matrix=A,          name='A')
# writeCodeMatrix(fileName, matrix=B,          name='B')
# writeCodeVector(fileName, vector=[ncoltran], name='ncoltran')
# writeCodeVector(fileName, vector=[ncoltemp], name='ncoltemp')
# writeCodeVector(fileName, vector=icol,       name='icol')
# writeCodeVector(fileName, vector=jcol,       name='jcol')
# writeCodeCuboid(fileName, cuboid=C_data,     name='C_data')


# B = [ [ [ i+j*3+k*9 for i in range(3)] for j in range(3) ] for k in range(3) ]

# writeCodeCuboid(fileName, cuboid=B,      name='B')






def main():

    ld = LineData

    ld.readLamdaFile('12C.txt')


# Main
# ----

if (__name__ == '__main__'):
    # Execute main
    main()
