# Magritte: Multidimensional Accelerated General-purpose Radiative Transfer
#
# Developed by: Frederik De Ceuster - University College London & KU Leuven
# _________________________________________________________________________


import numpy as np   # NumPy
import os            # operating system
import re            # regular expressions
import vtk           # VTK



# Readers
# -------

def getVariable(name, type):
    # Return value for variable from parameters.hpp
    with open('../src/parameters.hpp') as parameterFile:
        for line in parameterFile:
            splitLine = line.split()
            if (len(splitLine) > 2) and (splitLine[1] == name):
                if type == 'int':
                    return int(splitLine[2])
                if type == 'long':
                    return int(splitLine[2])
                if type == 'float':
                    return float(splitLine[2])
                if type == 'str':
                    strings = re.findall('\"([^,\"]+)\"',line)
                    if (len(strings) > 1):
                        return strings
                    else:
                        return strings[0]
                if type == 'bool':
                    if splitLine[2] == 'true':
                        return True
                    if splitLine[2] == 'false':
                        return False


def readSpeciesNames(fileName):
    # Return list with species names (in order)
    speciesNames = []
    with open(fileName) as dataFile:
        for line in dataFile:
            speciesNames += [line.split(',')[1]]
    return speciesNames

def getProperName(name):
    if name in ['e']: return 'e-'
    if name in ['pH2', 'oH2', 'p-H2', 'o-H2']: return 'H2'
    return name


def getSpeciesNumber(speciesNames, name):
    # Returns number of species given by 'name'
    # Note that there are dummy species in Magritte at places 0 and NLSPEC
    if isinstance(name, list):
        return [getSpeciesNumber(speciesNames,elem) for elem in name]
    else:
        for i in range(len(speciesNames)):
            if (speciesNames[i] == getProperName(name)):
                return i+1


def getProjectFolder():
    # Return value for variable from parameters.hpp
    with open('../src/directories.hpp') as parameterFile:
        for line in parameterFile:
            line = line.split()
            if (len(line) is 3) and (line[1] == 'PROJECT_FOLDER'):
                return str(re.findall('\"([^,\"]+)\"',line[2])[0])


def getFilePath(name):
    # Return (absolute) file path
    relativePath = getVariable(name, 'str')
    if isinstance(relativePath, list):
        return [getProjectFolder() + item for item in relativePath]
    else:
        return getProjectFolder() + relativePath


def fileExtension(fileName):
    # Returns the file extension given a fileName
    return os.path.splitext(fileName)[1]


def numberOfLines(fileName):
    count = 0
    for line in open(fileName):
        count += 1
    return count


def getNCELLS(fileName, gridType):
    if fileExtension(fileName) == '.txt':
        ncells = numberOfLines(fileName)
    if fileExtension(fileName) == '.vtu':
        reader = vtk.vtkXMLUnstructuredGridReader()
        reader.SetFileName(fileName)
        reader.Update()
        grid = reader.GetOutput()
        if gridType == 'cell_based':
            cellCentersFilter = vtk.vtkCellCenters()
            cellCentersFilter.SetInputData(grid)
            cellCentersFilter.Update()
            ncells = cellCentersFilter.GetOutput().GetNumberOfPoints()
        if gridType == 'point_based':
            ncells = grid.GetNumberOfPoints()
        print(ncells)
    return ncells



# Tools
# -----

def CArray(array):
    # Returns C formatted string of 'array'
    if isinstance(array, list):
        line = '{' + CArray(array[0])
        for i in range(1,len(array)):
            line += ', ' + CArray(array[i])
        line += '}'
        return line
    else:
        return str(array)


def vectorize(array):
    # Put all elements of array in a vector
    if isinstance(array, list):
        vector = []
        for elem in array:
            vector += vectorize(elem)
        return vector
    else:
        return [array]


# Wrtiters
# --------

def writeHeader(fileName):
    # Write header for code file
    with open(fileName, 'w') as codeFile:
        header = '// Generated by setup.py\n\n'
        codeFile.write(header)


def writeDefinition(fileName, definition, name):
    # Write macro definition in C format to file
    if isinstance(definition, list):
        macroDef = CArray(definition)
    else:
        macroDef = str(definition)
    line = '#define ' + name + ' ' + macroDef + '\n\n'
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


# def writeVariable(fileName, variable, name):
#     # Write variable definition in C format to file
#     if isinstance(variable, list):
#         definition = CArray(variable)
#         for nr in np.shape(np.array(variable)):
#             name += '[' + str(nr) + ']'
#     else:
#         definition = str(variable)
#     line = name + ' = ' + definition + ';\n\n'
#     with open(fileName, 'a') as codeFile:
#         codeFile.write(line)
