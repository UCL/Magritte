# Magritte: Multidimensional Accelerated General-purpose Radiative Transfer
#
# Developed by: Frederik De Ceuster - University College London & KU Leuven
# _________________________________________________________________________

import MagritteCppFunctions as mcp
import numpy as np
import data_tools
import re


# Defs
# ----

def getVariable(name, type):
    # Return value for variable from parameters.hpp
    with open('parameters.hpp') as parameterFile:
        for line in parameterFile:
            line = line.split()
            if (len(line) is 3) and (line[1] == name):
                if type is 'int':
                    return int(line[2])
                if type is 'long':
                    return long(line[2])
                if type is 'float':
                    return float(line[2])
                if type is 'str':
                    return str(re.findall('"(.+)"',line[2])[0])


def fileExtension(fileName):
    # Returns the file extension given a fileName
    return os.path.splitext(fileName)[1]


def numberOfLines(fileName):
    count = 0
    for line in open(fileName).xreadlines():
        count += 1
    return count


# def readGrid(fileName):
#     reader = vtk.vtkUnstructuredGridReader()
#     reader.SetFileName(fileName)
#     reader.Update()
#     grid = reader.GetOutput()
#     print grid.GetNumperOfPoints()


def writeHeader(fileName):
    # Write header for code file
    with open(fileName, 'w') as codeFile:
        header = '// Generated by setup.py\n\n'
        codeFile.write(header)


def writeDefinition(fileName, definition, name):
    # Write scalar in C format to code file
    line = '#define {} {};\n\n'.format(name, str(definition))
    with open(fileName, 'a') as codeFile:
        codeFile.write(line)


def main():
    # Main setup for Magritte

    dimensions = getVariable('DIMENSIONS', 'int')

    if (dimensions == 3):
        nsides = getVariable('NSIDES', 'long')
        nrays  = 12*nsides**2
    else:
        nrays  = getVariable('NRAYS', 'long')

    inputFile = getVariable('INPUTFILE', 'str')

    if fileExtension(inputFile) is '.txt':
        ncells = numberOfLines(inputFile)
    if fileExtension(inputFile) is '.vtu':
        ncells = mcp.get_NCELLS_vtu(inputFile)

    print ncells

    specDataFile = "../" + getVariable('SPEC_DATAFILE', 'str')
    nspec = numberOfLines(specDataFile) + 2

    reacDataFile = "../" + getVariable('REAC_DATAFILE', 'str')
    nreac = numberOfLines(reacDataFile)

    print nrays
    print type(nrays)


    fileName = 'test.hpp'

    writeHeader(fileName)

    # writeDefinition(fileName, ncells, 'NCELLS')
    writeDefinition(fileName, nspec, 'NSPEC')
    writeDefinition(fileName, nreac, 'NREAC')




# Main
# ----

if (__name__ == '__main__'):
    # Execute main
    main()
